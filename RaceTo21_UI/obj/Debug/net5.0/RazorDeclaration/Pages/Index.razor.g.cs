// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RaceTo21_UI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using RaceTo21_UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/_Imports.razor"
using RaceTo21_UI.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 163 "/Users/cuiwenyue/Projects/RaceTo21_UI/RaceTo21_UI/Pages/Index.razor"
 
    private enum Page
    {
        Main,
        Game,
        End
    }

    private Page page = Page.Main;

    private string DisplayValue = "";
    private int playerNumber = 0;
    private int currentPlayerIndex = 0;
    private bool buttonChoice = false;
    private int choiceTime = 0;
    private int cardNumber = 0;
    private string winner = null;
    private bool endCheck = false;
    private int playerToMoveNumber = 0;
    private bool askEnd = false;

    private void UpdateValue(ChangeEventArgs e)
    {
        DisplayValue = e.Value.ToString();
        playerNumber = int.Parse(DisplayValue);
    }

    private ValueTask PageChange(Page e)
    {
        page = e;
        return ValueTask.CompletedTask;
    }

    static CardTable cardTable = new CardTable();
    Game game = new Game(cardTable);
    public void AddPlayers(ChangeEventArgs e)
    {
        game.AddPlayer((string)e.Value);
        game.CheckPlayer();
    }

    private string PlayerShow(int i)
    {
        return game.PlayerShow(i);
    }

    private ValueTask ChoiceChange(bool b)
    {
        buttonChoice = b;
        choiceTime++;
        if (b == false)
        {
            PlayerStay(currentPlayerIndex);
            endCheck = CheckForEnd();
            if (!endCheck)
            {
                NextPlayer();
            }

        }
        return ValueTask.CompletedTask;
    }

    private void PlayerTurn(int playerIndex, bool buttonChoice, int cardNumber)
    {
        Console.WriteLine("Player turn execute");
        game.PlayerTurn(playerIndex, buttonChoice, cardNumber);
    }

    public void ButtonClick(int cardNum)
    {
        cardNumber = cardNum;
        //Console.WriteLine("cards number: " + cardNumber);
        PlayerTurn(currentPlayerIndex, buttonChoice, cardNumber);
        endCheck = CheckForEnd();
        if (!endCheck)
        {
            NextPlayer();
        }
    }

    private List<string> PlayerCardShow(int i)
    {
        List<Card> cards = game.showPlayerCard(i);
        Console.WriteLine("Here's the cards:");
        Console.Write(cards);
        if (cards != null)
        {
            List<string> showCardInfo = new List<string>();
            foreach (Card card in cards)
            {
                showCardInfo.Add(game.CardsToShow(card));
            }
            return showCardInfo;
        }
        else
        {
            return null;
        }
    }

    private void PlayerStay(int playerIndex)
    {
        game.PlayerStay(playerIndex);
    }

    private string ShowPlayerStatus(int playerIndex)
    {
        return game.showPlayerStatus(playerIndex);
    }

    private string ShowPlayerScore(int playerIndex)
    {
        return game.showPlayerScore(playerIndex);
    }

    private void NextPlayer()
    {
        if (currentPlayerIndex < playerNumber - 1)
        {
            currentPlayerIndex++;
        }
        else
        {
            currentPlayerIndex = 0;
        }
        cardNumber = 0;
        choiceTime = 0;
        buttonChoice = false;
    }

    private bool CheckForEnd()
    {
        winner = game.checkForEnd(playerNumber);
        if (winner == null)
        {
            return false;
        }
        else
        {
            currentPlayerIndex = 0;
            return true;
        }
    }

    private string PlayerPoints(int playerIndex)
    {
        string points = null;
        points = game.PlayerPoints(playerIndex).ToString();
        return points;
    }

    private ValueTask CheckContinue(bool b)
    {
        game.AskContinue(currentPlayerIndex, b);
        if (!b)
        {
            playerToMoveNumber++;
        }
        currentPlayerIndex++;
        if (currentPlayerIndex == playerNumber)
        {
            RoundEnd();
        }
        return ValueTask.CompletedTask;
    }

    private void RoundEnd()
    {
        string result = game.RoundEnd();
        if (result == "Restart")
        {
            playerNumber -= playerToMoveNumber;
            currentPlayerIndex = 0;
            buttonChoice = false;
            choiceTime = 0;
            cardNumber = 0;
            winner = null;
            endCheck = false;
            playerToMoveNumber = 0;
            askEnd = false;
        }
        else
        {
            page = Page.End;
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
